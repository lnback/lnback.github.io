<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - 标签 - lnback&#39; s blog</title>
        <link>https://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - 标签 - lnback&#39; s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 Jan 2021 19:57:30 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>《用Go实现设计模式》三、建造者模式</title>
    <link>https://example.com/3.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 19:57:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/3.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[建造者模式 建造者模式，是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。创建者模式隐藏了复杂对象的创建过程，它把]]></description>
</item><item>
    <title>《用Go实现设计模式》二、工厂模式</title>
    <link>https://example.com/2.%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 17:45:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/2.%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[工厂模式 如何判断使用工厂模式 封装变化 创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。 代码复用 创建代码抽离到独立的工厂类之后]]></description>
</item><item>
    <title>《用Go实现设计模式》一、单例模式</title>
    <link>https://example.com/1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 12:43:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式 定义 一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。 用处 从业务概念上，]]></description>
</item></channel>
</rss>
