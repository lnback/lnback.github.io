<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - 标签 - lnback&#39; s blog</title>
        <link>https://example.com/tags/go/</link>
        <description>Go - 标签 - lnback&#39; s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 08 Jan 2021 18:19:30 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go并发编程(四)Once</title>
    <link>https://example.com/4.once/</link>
    <pubDate>Fri, 08 Jan 2021 18:19:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/4.once/</guid>
    <description><![CDATA[Once Once是一个很简单的并发原语，用来保证仅仅执行一次动作，常用于单例对象的初始化场景 介绍 案例 用单例对象的创建来介绍一下Once的 在Java]]></description>
</item><item>
    <title>Go并发编程(三)WaitGroup</title>
    <link>https://example.com/3.waitgroup/</link>
    <pubDate>Fri, 08 Jan 2021 17:23:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/3.waitgroup/</guid>
    <description><![CDATA[WaitGroup WaitGroup可以解决一个goroutine等待多个goroutine同时结束的场景，这个比较常见的场景就是后端启动了多个消费者干活，]]></description>
</item><item>
    <title>Go并发编程(二)RWMutex</title>
    <link>https://example.com/2.rwmutex/</link>
    <pubDate>Thu, 07 Jan 2021 15:56:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/2.rwmutex/</guid>
    <description><![CDATA[RWMutex Mutex可以保证只有一个goroutine来访问共享资源，这在某些情况下有点浪费。比如说，在写少读多的情况下，即使一段时间内没有写操作，]]></description>
</item><item>
    <title>Go并发编程(一)Mutex</title>
    <link>https://example.com/1.mutex/</link>
    <pubDate>Wed, 06 Jan 2021 16:10:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/1.mutex/</guid>
    <description><![CDATA[Mutex Mutex是Go语言中的互斥锁，互斥锁是并发控制的一个基本手段，是为了避免竞争而建立的一种并发控制机制。Go语言中的Mutex使用了自旋、]]></description>
</item><item>
    <title>Go的接口型函数</title>
    <link>https://example.com/%E6%8E%A5%E5%8F%A3%E5%9E%8B%E5%87%BD%E6%95%B0/</link>
    <pubDate>Tue, 05 Jan 2021 10:30:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/%E6%8E%A5%E5%8F%A3%E5%9E%8B%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[Go的接口型函数 接口型函数 先看看接口型函数的代码 1 2 3 4 5 6 7 8 9 type Getter interface { Get(key string) (string,error) } type GetterFunc func(key string) (string,error) func (f GetterFunc) Get(key string) (string,error){ return f(key) } 这里定义了一个接口Getter]]></description>
</item><item>
    <title>《用Go实现设计模式》四、原型模式</title>
    <link>https://example.com/4.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 19:58:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/4.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[原型模式 定义 利用已有对象（原型）进行复制（拷贝）的方式来创建新对象，已达到节省创建时间的目的。 使用场景 对象的创建成本较大，并且同一个类的不同]]></description>
</item><item>
    <title>《用Go实现设计模式》三、建造者模式</title>
    <link>https://example.com/3.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 19:57:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/3.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[建造者模式 建造者模式，是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。创建者模式隐藏了复杂对象的创建过程，它把]]></description>
</item><item>
    <title>《用Go实现设计模式》二、工厂模式</title>
    <link>https://example.com/2.%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 17:45:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/2.%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[工厂模式 如何判断使用工厂模式 封装变化 创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。 代码复用 创建代码抽离到独立的工厂类之后]]></description>
</item><item>
    <title>《用Go实现设计模式》一、单例模式</title>
    <link>https://example.com/1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 04 Jan 2021 12:43:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式 定义 一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。 用处 从业务概念上，]]></description>
</item><item>
    <title>Go语言的CSP模型</title>
    <link>https://example.com/go%E8%AF%AD%E8%A8%80%E7%9A%84csp%E6%A8%A1%E5%9E%8B/</link>
    <pubDate>Fri, 18 Dec 2020 18:16:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/go%E8%AF%AD%E8%A8%80%E7%9A%84csp%E6%A8%A1%E5%9E%8B/</guid>
    <description><![CDATA[go语言的两个亮点：一个是goroutine，一个就是channel。二者合体的典型应用CSP，就是大家认可的并行开发神器。 1.1 什么是CSP？]]></description>
</item></channel>
</rss>
