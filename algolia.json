[
    {
        "title": "《用Go实现设计模式》一、单例模式",
        "uri": "posts/1.单例模式",
        "content": "ID  golang        golang             id                                                   private                                 getInstance                             instance         instance                                     getInstance        instance                                                                                 Java                              Java            OOP                                                                                                                              mock                                                               go package singleton type Singleton struct     var singleton  Singleton func GetInstance    Singleton   return singleton   func init    singleton    Singleton             go package singleton_test import    github com stretchr testify assert   go demo singleton   testing    func TestGetInstance t  testing T    assert Equal t singleton GetInstance   singleton GetInstance      func BenchmarkGetInstanceParallel b  testing B    b RunParallel func pb  testing PB    pb Next    singleton GetInstance      singleton GetInstance    b Errorf  test fail                         go package singleton import  sync  var   lazySingleton  Singleton once    sync Once     func GetLazyInstance    Singleton   lazySingleton    nil  once Do func     lazySingleton    Singleton        return lazySingleton           go package singleton_test import    github com stretchr testify assert   go demo singleton   testing    func TestGetLazyInstance t  testing T    assert Equal t singleton GetLazyInstance   singleton GetLazyInstance      func BenchmarkGetLazyInstanceParallel b  testing B   b RunParallel func pb  testing PB    pb Next     singleton GetLazyInstance      singleton GetLazyInstance    b Errorf  test fail                    bash goos  windows goarch  amd64 pkg  go demo singleton_test BenchmarkGetInstanceParallel BenchmarkGetInstanceParallel 6 1000000000 0 242 ns op 0 B op 0 allocs op BenchmarkGetLazyInstanceParallel BenchmarkGetLazyInstanceParallel 6 1000000000 0 578 ns op 0 B op 0 allocs op PASS ok go demo singleton_test 0 943s               init",
        "objectID": "posts/1.单例模式",
        "date": "2021-01-04T04:43:30.000Z",
        "lastmod": "2021-01-04T04:43:30.000Z",
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Go",
            "设计模式"
        ],
        "categories": [
            "Golang"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（一）数据结构",
        "uri": "posts/1.数据结构",
        "content": "Redis                    Redis       C                                         SDS         SDS  Redis           Redis  C                          c   redislog REDIS_WARNING  Redis ready exit  bye bye                         SDS      bash redis  RPUSH fruits  apple   banana   cherry   integer  3   Redis                    key                   fruits SDS  value                      SDS    1 1 SDS    SDS          sds h sdshdr    c   struct      buf                  SDS          int len      buf            int free                 char buf                  free 0                 0 len 5  SDS      5 buf               1        len               SDS         C                 c printf   s  s  buf    1 2 SDS C       C                       Redis                                              C                       O n  SDS       len                 O 1              C                                      redis  sdscat                                                      C                        Redis        std  vector                           len  1MB  free len         len 13   free  13   buf       13   13   1   27   len  1MB  free 1MB      len 30MB free 1MB buf      1MB   30MB   1byte        C       0      C                                        SDS  len             0       C        SDS       0         SDS                               O n             C         Redis         2 1                       adlist h listNode        c typedef struct listNode         struct listNode   prev         struct listNode   next         void  value   listNode      Node                Redis    adlist h list         c typedef struct list          listNode   head         listNode   tail               unsigned long len            void  dup  void   ptr            void  free  void ptr            int  match  void ptr void   key      Redis                              null                O 1           void                              key        value                                                     C           Redis       3 1       Redis                                                        3 1 1     Redis          dict h dictht        c typedef struct dictht            dictEntry   table          unsigned long size                        size   1 unsigned long sizemask                unsigned long used       table                   dict h dictEntry    3 1 2               dictEntry       dictEntry              c typedef struct dictEntry        void  key       union   void  val  uint64_t u64  int64_t s64    v                    struct dictEntry  next    dictEntry     v                               uint64t             int64t      next                                                      collision                2                  3 1 3    Redis     dict h dict      c typedef struct dict             dictType  type          void  privdata         dictht ht 2      rehash         rehash           1 int rehashidx     rehashing not progress rehashidx     1      dict       type   privdata                             type       dictType        dictType                         privdata                          c typedef struct dictType               unsigned int  hashFunction  const void key             void  keyDup  void privdata  const void key             void  valDup  void privdata  const void obj             int  keyCompare  void privdata  const void key1  const void key2             void  keyDestructor  void privdata  void  key             void  valDestructor  void privdata  void  obj     dictType         ht                    ht 0     ht 1        ht 0       rehash        ht 1        rehash      rehashidx      rehash               rehash        1               rehash     3 2                                                                   Redis                 c                   key     hash   dict  type  hashFunction key          sizemask                       ht x    ht 0   ht 1  index   hash   dict  ht x  sizemask                                     8  index         c index   hash   dict  ht 0  sizemask 1   8   3   0     Redis             MurmurHash2                                                       3 3 Rehash                                          load Factor                                                          Rehash                                   ht 1            ht 0  used   2   2 n             ht 1            ht 0  used   2 n             ht 0        rehash ht 1       ht 1    ht 0    ht 1                 rehash          Rehash                    c                             load_factor   ht 0  used   ht 0  size   3 4    Rehash 3 4 1    rehash               ht 0   hash ht 1                                                               rehashidx        0   rehash           rehash                                    ht 0     rehashidx         rehash ht 1    rehash            rehashidx                     rehashidx     1   rehash             rehash                    rehash                                    rehash            3 4 2    rehash                   rehash             ht 0  ht 1              rehash                                ",
        "objectID": "posts/1.数据结构",
        "date": "2020-12-04T09:55:30.000Z",
        "lastmod": "2020-12-05T08:45:40.000Z",
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（二）对象",
        "uri": "posts/2.对象",
        "content": "Redis         Redis                                                                                                                                                                                                           Redis                            redisObject                        type   encoding   ptr      c typedef struct redisObject        unsigned typed   4        unsigned encoding  4                  void   ptr   obj                              1 1           type                                               REDIS_STRING         REDIS_LIST        REDIS_HASH        REDIS_SET        REDIS_ZSET           Redis                                                                                                                                    1 2           ptr                           encoding     encoding                                         REDISENCODINGINT  long         REDISENCODINGEMBSTR  embstr              REDISENCODINGRAW           REDISENCODINGHT      REDISENCODINGLINKEDLIST        REDISENCODINGZIPLIST        REDISENCODINGINTSET        REDISENCODINGZSKIPLIST                 2 1                  int raw  embstr                               long                             ptr      void    long               int                                  39                       SDS                      raw                                   39              embstr                 embstr                              raw        redisObject   sdshdr                   raw            redisObject   sdshdr      embstr                                                              raw                                             3 14       3 14                                                                                                                     long        int      long double         embstr  raw                long        embstr  raw  2 2                        int                                                      int  raw    bash redis  SET number 10086 OK redis  OBJECT ENCODING number  int  redis  APPEND number   good number    integer  23 redis  number  10086 good number   redis  OBJECT ENCODING number  raw      Redis    embstr                      embstr                   embstr                    embstr   raw                    3 1                 ziplist   linkedlist                                        1    three    5   bash redis   RPUSH numbers 1  three  5  integer  3           ziplist     linkedlist                      Redis      StringObject                                                  3 2                                ziplist                         64                 512                                                                   ziplist  linkedlist         4 1                 ziplist  hashtable   ziplist                                                                                                                                                                      bash redis  HSET profile name  Tom   integer  1 redis  HSET profile age 25  integer  1 redis  HSET profile career  Programmer   integer  1    hashtable                                                                                                  hashtable    4 2                                ziplist                              64                 512                                                        ziplist  hashtable         5 1                 intset  hashtable   intset                      c redis   SADD numbers 1 3 5  integer  3         hashtable                                                              NULL  5 2                              intset                                    512      intset                                                                                intset    hashtable            6 1                 ziplist  skiplist    ziplist                                                              member                score    c redis  ZADD price 8 5 apple 5 0 banana 6 0 cherry  integer  3    skiplist           zset            zset                   c typedef struct zset  zskiplist   zsl  dict   dict   zset                                                        O 1                                               double              zset                                                                                                        6 2                                  ziplist                    128                        64                           skiplist                                       c typedef struct redisObject         int refcount   robj                                                      1               1                1              0                                     incrRefCount              decrRefCount                        0          resetRefCount             0                                                                              A          100                 B              100                          B          100         A  B                                Redis                                                                Redis                 ",
        "objectID": "posts/2.对象",
        "date": "2020-12-04T09:55:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《用Go实现设计模式》二、工厂模式",
        "uri": "posts/2.工厂模式",
        "content": "Go               NewName                                  go package factory type IRuleConfigInterface interface   Parse data   byte    type JsonConfigInterface struct     func  config JsonConfigInterface  Parse data   byte    panic  implement me     type YamlConfigInterface struct     func  yaml YamlConfigInterface  Parse data   byte    panic  implement me     func NewIRuleConfigParse t string  IRuleConfigInterface   switch t   case  json   return JsonConfigInterface   case  yaml   return YamlConfigInterface     return nil               got want       equal   go package factory import    reflect   testing    func TestNewIRuleConfigParser t  testing T    type args struct   t string   tests      struct   name string args args want IRuleConfigInterface      name   json   args  args t   json    want  JsonConfigInterface         name   yaml   args  args t   yaml    want  YamlConfigInterface         _  tt    range tests   t Run tt name  func t  testing T       NewIRuleConfigParse tt args t    reflect DeepEqual got  tt want    t Errorf  NewIRuleConfigParser      v  want  v   got  tt want                                      new                                                                           go type IRuleConfigParserFactory interface   CreateParser   IRuleConfigParserFactory   type yamlRuleConfigParserFactory struct     func yaml yamlRuleConfigParserFactory  CreateParser   IRuleConfigParserFactory   return yamlRuleConfigParserFactory     type jsonRuleConfigParserFactory struct     func  json jsonRuleConfigParserFactory  CreateParser   IRuleConfigParserFactory   return jsonRuleConfigParserFactory     func NewIRuleConfigParserFactory t string  IRuleConfigParserFactory   switch t   case  json   return jsonRuleConfigParserFactory   case  yaml   return yamlRuleConfigParserFactory     return nil           go func TestNewIRuleConfigParserFactory t  testing T    type args struct   t string   tests      struct   name string args args want IRuleConfigParserFactory      name   json   args  args t   json    want  jsonRuleConfigParserFactory         name   yaml   args  args t   yaml    want  yamlRuleConfigParserFactory         _  tt    range tests   t Run tt name  func t  testing T       NewIRuleConfigParserFactory tt args t    reflect DeepEqual got  tt want    t Errorf  NewIRuleConfigParserFactory      v  want  v   got  tt want                   go type IRuleConfigParser interface   Parse data   byte       jsonRuleConfigParser jsonRuleConfigParser type jsonRuleConfigParser struct      Parse Parse func  j jsonRuleConfigParser  Parse data   byte    panic  implement me        ISystemConfigParser ISystemConfigParser type ISystemConfigParser interface   ParseSystem data   byte       jsonSystemConfigParser jsonSystemConfigParser type jsonSystemConfigParser struct      Parse Parse func  j jsonSystemConfigParser  ParseSystem data   byte    panic  implement me        IConfigParserFactory        type IConfigParserFactory interface   CreateRuleParser   IRuleConfigParser CreateSystemParser   ISystemConfigParser   type jsonConfigParserFactory struct   func  j jsonConfigParserFactory  CreateRuleParser   IRuleConfigParser   return jsonRuleConfigParser     func  j jsonConfigParserFactory  CreateSystemParser   ISystemConfigParser   return jsonSystemConfigParser             go package factory import    reflect   testing    func TestjsonConfigParserFactoryCreateRuleParser t  testing T    tests      struct   name string want IRuleConfigParser      name   json   want  jsonRuleConfigParser         _  tt    range tests   t Run tt name  func t  testing T    j    jsonConfigParserFactory      j CreateRuleParser     reflect DeepEqual got  tt want    t Errorf  CreateRuleParser      v  want  v   got  tt want           func TestjsonConfigParserFactoryCreateSystemParser t  testing T    tests      struct   name string want ISystemConfigParser      name   json   want  jsonSystemConfigParser         _  tt    range tests   t Run tt name  func t  testing T    j    jsonConfigParserFactory      j CreateSystemParser     reflect DeepEqual got  tt want    t Errorf  CreateSystemParser      v  want  v   got  tt want             DI   DI      Spring Bean          Bean",
        "objectID": "posts/2.工厂模式",
        "date": "2021-01-04T09:45:30.000Z",
        "lastmod": "2021-01-04T09:45:30.000Z",
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Go",
            "设计模式"
        ],
        "categories": [
            "Golang"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《用Go实现设计模式》三、建造者模式",
        "uri": "posts/3.建造者模式",
        "content": "4                                  go package builder import  fmt  type ResourcePoolConfig struct   name string maxTotal int maxIdle int minIdle int   type ResourcePoolConfigOption struct   maxTotal int maxIdle int minIdle int   type ResourcePoolConfigOptFunc func option  ResourcePoolConfigOption  func NewResourcePoolConfig name string opts    ResourcePoolConfigOptFunc    ResourcePoolConfig error   name        return nil fmt Errorf  name not empty     option     ResourcePoolConfigOption  maxTotal  10  maxIdle  9  minIdle  1    fmt Println option  _ opt    range opts  opt option    fmt Println option  option maxTotal option maxIdle  return nil fmt Errorf  args err option    v  option    return  ResourcePoolConfig  name  name  maxTotal  option maxTotal  minIdle  option minIdle  maxIdle  option maxIdle    nil            go package builder import    github com stretchr testify assert   github com stretchr testify require   testing    func TestNewResourcePoolConfig t  testing T    type args struct   name string opts   ResourcePoolConfigOptFunc   tests      struct  name string args args want  ResourcePoolConfig wantErr bool      name   name empty   args  args  name         want  nil  wantErr  true       name   success   args  args  name   test   opts    ResourcePoolConfigOptFunc  func option  ResourcePoolConfigOption    option minIdle   2          want   ResourcePoolConfig  name   test   maxTotal  10  maxIdle  9  minIdle  2     wantErr  false       _ tt    range tests  t Run tt name  func t  testing T    got err    NewResourcePoolConfig tt args name tt args opts     require Equalf t tt wantErr err    nil  error  v wantErr  v  err tt wantErr  assert Equal t tt want got",
        "objectID": "posts/3.建造者模式",
        "date": "2021-01-04T11:57:30.000Z",
        "lastmod": "2021-01-04T11:57:30.000Z",
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Go",
            "设计模式"
        ],
        "categories": [
            "Golang"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（三）数据库",
        "uri": "posts/3.数据库",
        "content": "Redis                    redis h redisServer   db    db          redis h redisDb      redisDb             c struct redisServer            redisDb   db          int dbnum                        dbnum                   16     Redis                                          Redis          0               SELECT             bash redis  SET msg  hello world  OK redis  msg  hello world  redis  SELECT 2 OK redis 2   msg  nil                redisClient   Db                          redisDb        c typedef struct redisClient                    redisDb   db   redisClient                  1                                                                              2 1       Redis                       redis h redisDb     dict                              key space    c typedef struct redisDb           dict   dict   redisDb                                                                                            bash redis  SET message  hello world  OK redis  RPUSH alphabet  a   b   c   integer 3 redis  HSET book name  Redis Action   integer  1 redis  HSET book author  Josiah L  Carlson   integer  1 redis  HSET book publisher  Manning   integer  1   2 2          2 2 1                                                                  SET date 2020 1 1     MSET date1 19 date2 20        HSET book name C  primer    HMSET fruit name apple size large        LSET cloth 0 shirt    LPUSH food potato    RPUSH brand apple    LRANGE level 0 5        SADD occupation firefighter        ZADD grade 87 tom 65 terry  2 2 2                              DEL date        HDEL myhash field1 myhash field2        BLPOP list1 100    BRPOP list1 150    LPOP list2    LREM list3  2  hello         SPOP food  rice     SREM food  noodle         ZREM website google com    ZREMRANGEBYLEX drink  sprit  coco    ZREMRANGEBYRANK salary 0 2    ZREMRANGEBYSCORE salary 1500 3500  POP                     REM        BLPOP                                         LEX               ZREMRANGEBYRANK salary 0 2     salary       2 2 3                              GET time    MGET time1 time2         HGET site baidu    HMGET site baidu google    HGETALL site    HKEYS site        LINDEX mylist 2    LRANGE mylist 0 2        SISMEMBER myset1  hello              HGET        HGETALL         HKEYS                              3 1          EXPIRE    PEXPIRE                          Time Live TTL                                0     bash redis  SET key value OK redis  EXPIRE key 5  integer  1 redis  key    5     value  redis  key    5     nil                 EXPIREAT   PEXPIREAT                           expire time       UNIX        TTL   PTTL                       Redis        PEXPIREAT     RedisDb              expires                                  long long               UNIX      c typedef struct redisDb                            dict  expires           redisDb                                              3 2                 TTL         bash redis   EXPIRE key 123123123 1 redis   TTL key 123123117 redis   PERSIST key 1 redis   TTL key  1          TTL  bash reids  EXPIRE key 123123123 1 redis  TTL key 123123118 redis   PTTL key 123123113900   3 3                                                                                timer                                                                          1                    CPU                      CPU                                         CPU                                   Redis                                           O N                    2       CPU                                                                                                                        3                                     CPU                       Redis                       1 Redis           db c expireIfNeeded           Redis           expireIfNeeded                                    2 Redis                   redis c activeExpireCycle       Redis         redis c serverCron      activeExpireCycle                                      expires                                  current_db     activeExpireCycle                                     activeExpireCycle      10                11                           current_db     0                       Redis2 8                                                     4 1                                                    1  0        message                 message              bash 127 0 0 1 6379  SUBSCRIBE _ keyspace 0 _ message Reading messages     press Ctrl C quit  1   subscribe          2   keyspace 0 message  3   integer  1 1   message      SET   2   _ keyspace 0 _ message  3   set  1   message      EXPIRE   2   _ keyspace 0 _ message  3   expire      2       0      DEL     bash 127 0 0 1 6379  SUBSCRIBE _ keyevent 0 _ del Reading messages     press Ctrl C quit  1   subscribe          2   _ keyevent 0 _ del  3   integer  1 1   message     key   DEL   2   _ keyevent 0 _ del  3   key  1   message     number   DEL   2   _ keyevent 0 _ del  3   number    4 2                   notify c notifyKeyspaceEvent               c void notifyKeyspaceEvent int type char event robj key int dbid      type          ",
        "objectID": "posts/3.数据库",
        "date": "2020-12-07T12:34:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（四）持久化",
        "uri": "posts/4.持久化",
        "content": "RDB                                                                 Redis                                                        Redis   RDB             Redis                   RDB      RDB   Redis Database                                                           1 1 RDB            Redis        RDB      SAVE     BGSAVE  BackGround SAVE  SAVE     Redis        RDB                                    bash redis  SAVE       RDB       OK    BGSAVE               RDB     bash redis  BGSAVE                RDB   Background saving started   BGSAVE       SAVE   BGSAVE BGREWRITEAOF                RDB        rdb c rdbSave     SAVE   BGSAVE                 Redis     RDB                 RDB                          1 2          BGSAVE                                            bash save 900 1 save 300 10 save 60 10000            900           1    300         10                save                  redisServer   saveparams     c struct redisServer                        struct saveparam  saveparams               saveparams                    saveparam     saveparam         save            c struct saveparam         time_t seconds         int changes                saveparams               dirty        lastsave    dirty         SAVE BGSAVE                            lastsave                                      dirty                          N  bash redis  SADD database0 apple orange watermelon   Redis           serverCron    100                                        save                           BGSAVE          dirty 0 lastsave    1 3 RDB        RDB      RDB                                                             ASCII   UNICODE                                    REDIS 5     5          RDB    db_version   4        RDB      0006     6   database                                EOF 1           check_sum  8                                                    1 3 1 database           RDB         SELECTDB dbnumber keyvalue_pairs            SELECTDB  1                               db_number  1 2 5             keyvaluepairs                1 3 2 keyvaluepairs              RDB    TYPE key value                  RDB        EPIRETIME_MS  1                            ms  8                   UNIX     1 3 3 value    1         TYPE    REDISRDBTYPESTRING   value                        REDISENCODINGINT  REDISENCODING_RAW      INT              32                ENCODING     REDISRDBENCINT8 REDISRDBENCINT16  REDISRDBENC_INT32                RDB    8  16   32       integer     RAW                                                                  REDISRDBENC_LZF     LZF     compressed_len            origin_len       compressed_string           2        TYPE    REDISRDBTYPELIST   value       REDISENCODING_LINKEDLIST         RDB                                                        3       5           5     hello    3        TYPE    REDISRDBTYPESET   value       REDISENCODING_HT         RDB                   elem                               4       5          apple    4         TYPE   REDISRDBTYPEHASH   value       REDISENCODING_HT        RDB                             2            1     a    5     apple    5          TYPE   REDISRDBTYPEZSET   value       REDISENCODING_SKIPLIST          RDB                        2          2     pi           4     3 14    6 INTSET        TYPE   REDISRDBTYPESETINTSET   value              RDB                                         RDB       7 ZIPLIST                 TYPE   REDISRDBTYPELISTZIPLIST REDISRDBTYPEHASHZIPLIST  REDISRDBTYPEZSETZIPLIST   value                                      AOF    RDB              AOF Append File    Redis                       bash redis  SET msg  hello  OK    AOF         bash  2 r n 6 r nSELECT r n 1 r n0 r n  3 r n 3 r nSET r n 3 r nmsg r n 5 r nhello r n   2 1 AOF     AOF      Append File AOF                 appen          sync  2 1 1        AOF                                  aof_buf         c struct redisServer          sds aof_buf     AOF                      SET KEY VALUE              aof_buf      bash  3 r n 3 r nSET r n 3 r nKEY r n 5 r nVALUE r n   2 1 2 AOF         Redis               loop                                                 serverCron                                    flushAppendOnlyFile          aof_buf             AOF                     appendfsync          everysec                          aof_buf    AOF     2 2 AOF             AOF                                        AOF                               AOF                                redis                 AOF                         23  2 3 AOF           AOF                     Redis   AOF          Redis           AOF        AOF       AOF                                                                                  aof_rewrite         list   RPUSH     A   B   C     LPOP        4      RPUSH list B              aof_rewrite                              Redis AOF                    AOF                          Redis        AOF                            Redis                           AOF    AOF                 AOF                              AOF              AOF            AOF                      AOF    ",
        "objectID": "posts/4.持久化",
        "date": "2020-12-09T04:55:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《用Go实现设计模式》四、原型模式",
        "uri": "posts/4.原型模式",
        "content": "hash     rpc            io                                                                                                                                                          Java C                         JS          JS                       JS                                                   A                                                                       1        2  go package prototype import    encoding json   time    type Keyword struct   word string visit int UpdatedAt  time Time                          func  k Keyword  Clone   Keyword   var newKeyword    Keyword   b   _    json Marshal k  json Unmarshal b  newKeyword  return newKeyword   type Keywords map string  Keyword func  words Keywords  Clone updateWords    Keyword  Keywords   newKeywords    Keywords                        k v    range words  newKeywords k    v           _ word    range updateWords  newKeywords word word    word Clone     return newKeywords           go package prototype import    fmt   github com stretchr testify assert   testing   time    func TestKeywords_Clone t  testing T    updateAt  _    time Parse  2006    2020   words    Keywords   testA    Keyword  word   testA   visit  1  UpdatedAt   updateAt      testB    Keyword  word   testB   visit  2  UpdatedAt   updateAt      testC    Keyword  word   testC   visit  3  UpdatedAt   updateAt          time Now   updatedWords       Keyword    word   testB   visit  10  UpdatedAt   now          words Clone updatedWords  fmt Println assert Equal t  words  testA    got  testA     fmt Println assert NotEqual t  words  testB    got  testB     fmt Println assert NotEqual t  updatedWords 0   got  testB     fmt Println assert Equal t  words  testC    got  testC",
        "objectID": "posts/4.原型模式",
        "date": "2021-01-04T12:01:30.000Z",
        "lastmod": "2021-01-04T12:01:30.000Z",
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Go",
            "设计模式"
        ],
        "categories": [
            "Golang"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（五）事件",
        "uri": "posts/5.事件",
        "content": "Redis                                      Redis                  Redis                                                                            Redis  Reactor                                   Reactor                        IO                    IO                     Redis            I O     multiplexing                                                              accept     read     write     close                                                                                 I O                                            Redis                            Redis             1 1                            I O               dispatcher                                                                        I O                                           sequentially     synchronously                                                             1 2 IO          Redis I O                    select epoll evport kqueue  I O              I O        Redis                aeselect c aeepoll c ae_kqueue c   ae  A simple event driven programming library                IO                           1 3      I O                   ae h AEREADABLE ae h AEWRITABLE                                       write                  connect                       AE_READABLE               read                       AR_WRITABLE                               1 4                                                  1          networking c acceptTcpHandler   Redis              sys socket h accept         Redis                                  AEREADABLE             sys socket h connect                       AEREADABLE                  2          networking c readQueryFromClient   Redis                                         unistd h read                                                  AEREADABLE                                        AEREADABLE                  3          networking c sendReplyToClient   Redis                                               unistd h write                                          AEWRITABLE                                        AEWRITABLE                        Redis                                                                      id               ID                  when    UNIX                timeProc                   2 1                                                                                                   ID                                  ID             when         2 2 API  ae c aeCreateTimeEvent          milliseconds          proc                       ae c aeDeleteFileEvent           ID               ID           ae c aeSearchNearestTimer                            ae c processTimeEvents                                                       when     UNIX             UNIX     2 3 severCron        Redis                                redis c serverCron                                                               AOF RDB        sever                                            cron unix                   100          redis conf   hz       2 4                                                                                             ae c aeProcessEvents                                                                                                                                                                    break",
        "objectID": "posts/5.事件",
        "date": "2020-12-09T06:51:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（六）客户端和服务器",
        "uri": "posts/6.客户端和服务器",
        "content": "Redis                                                  I O                 Redis                                                                      redis h redisClient                                                    c struct redisServer                             list  clients              1 1        1              fd                              fd       1    1            1          AOF   Lua                   1       CLIENT list                      bash redis  CLIENT list addr 127 0 0 1 53428 fd 6 name  age 1242 idle 0     addr 127 0 0 1 53469 fd 7 name  age 4 idle 4        2                           name        CLIENT setname                              c typedef struct redisClient         robj  name         redisClient                        name    NULL              name               3            flags          role                 c typedef struct redisClient          int flags           redisClient       REDIS_BLOCKED           BRPOP BLPOP      flag                         c flags REDISSLAVE   REDISPRE_PSYNC     4                                   c typedef struct redisClient          sds querybuf           redisClient         AOF     SET key value       SDS    c  3 r n 3 r nSET r n 3 r nkey r n 5 r nvalue r n    5                                 querybuf                                                   argv   argc     c typedef struct redisClient          robj   argv  int argc           redisClient     argv                           argv 0                             6                        argv   argc              argv 0                                      SDS              redisCommand                                                      argv 0      redisCommand          cmd           c typedef struct redisClient          struct redisCommand  cmd           redisClient            cmd      redisCommand     argv argc                                   7                                                                                                    OK                                                                                      8            authenticated                     c typedef struct redisClient          int authenticated           redisClient     0          1              AUTH                              bash redis  SET msg  hello world   error  NOAUTH Authentication required          AUTH                  authenticated       0  1   9                      c typedef struct redisClient          time_t ctime  time_t lastinteraction  timet obufsoftlimitreached_time           redisClient    ctime                                         lastinteraction                     interaction              obufsoftlimitreachedtime                    soft limit     1 2           1                                   connect                                     clients                                                                CLIENT KILL                                            1 GB                                     1GB                         obufsoftlimitreachedtime                                                        obufsoftlimitreachedtime                                                                                    2 Lua                       Lua      Redis                           lua_client      c struct redisServer          redisClient  lua_client              Lua                                      AOF           AOF     Redis                                 2 1              SET KEY VALUE                                    SET KEY VALUE                OK      OK                      1                                                       2                                                                                                           argv argc             3                                            cmd                        redisCommand         slags                  set                                                       cmd    NULL   redisCommand   arity                                     SUBSCRIBE                              Lua                                                      EXEC DISCARD MULTI WATCH                                                                     client         cmd            proc  c client  cmd  proc client                                                                         2 2 severCron   Redis     serverCron      100                                    severCorn            1           Redis                                                                  unixtime   mstime               c struct redisServer                         UNIX    time_t unixtime                  UNIX    long long mstime         serverCron       100         unixtime   mstime                         2   LRU          lruclock         LRU             unixtime   mstime                    c struct redisServer                10                        idle     unsigned lruclock 22               Redis       lru     lru                      c typedef struct redisObject          unsigned lru 22           robj                                                   lruclock   ",
        "objectID": "posts/6.客户端和服务器",
        "date": "2020-12-11T02:57:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "《Redis设计与实现》（七）复制",
        "uri": "posts/7.复制",
        "content": "2 8          2 8                     Redis          SLAVEOF      slaveof                                    master                         slave             A    SLAVEOF  A  B                                                                              bash 127 0 0 1 6379  SET msg  hello world  OK                msg      bash 127 0 0 1 12345  msg  hello world           1 1         Redis                                                                                                                       1 1 1                             SYNC         SYNC                    SYNC             BGSAVE     RDB                         RDB                                                    BGSAVE               RDB   1 1 2                                                                                   1 2          Redis                                                                                                                                                                          SYNC                    2 1           Redis 2 8       PSYNC    SYNC              PSYNC                                  SYNV                                                                                        ID 2 1 1                                           N                      N                 N                    N                                                                                                                    2 1 2                                fixed size      FIFO         1MB                                                                                                  PSYNC           offset                                        offset                                                                                                                                               2 1 3      ID   Redis                        ID   ID             40                                           ID                    ID                                                  ID    ID                               ID                                               2 2 PSYNC      PSYNC                            PSYNC  1                                     PSYNC                ID                   PSYNC                             1            FULLRESYNC                                  ID         PSYNC         offset                2            CONTINUE                                                              3            ERR                 Redis2 8      PSYNC               SYNC                   2 3                                  IP   127 0 0 1    6379     IP 127 0 0 1   12345   1                                bash 127 0 0 1 12345  SLAVEOF 127 0 0 1 6379 OK                         IP  127 0 0 1    6379         masterhost   masterport       c struct redisServer        char  masterhost  int masterport              2                      IP                                                               3   PING                   PING                                                                                                                                                                                       PONG                4        pong                             masterauth                     5                                                                   slavelisteningport      c typedef struct redisClient                        int slavelisteningport           redisClient     6                     PSYNC                                                                                              7                                                                                                                      bash REPLCONF ACK                      min salves          3 1                              REPLCONF ACK                            3 2     min slaves   Redis min slaves to write min slaves max lag                                c min slaves to write 3 min slaves max lag 10                3              lag        10                3 3",
        "objectID": "posts/7.复制",
        "date": "2020-12-15T02:26:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Redis",
            "阅读"
        ],
        "categories": [
            "redis"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "Go语言的CSP模型",
        "uri": "posts/go语言的CSP模型",
        "content": "go           goroutine     channel          CSP                1 1    CSP  CSP Communicating Sequential Process                                                                         channel                 Actor   CSP channel                               channel       CSP                                                  Occam Limbo Golang           Golang       CSP            Process Channel        goroutine channel                  Process       Channel Channel        Process         Process  Channel                        1 2 Golang CSP                        Go    CSP                           Channel               Golang    CSP                            Go          CSP              process channel      process go        goroutine goroutine                   channel        Go   CSP      goroutine   channel     goroutine                                                              channel    Unix Pipe                           channel      1 3 Channel goroutine channel Go            goroutine         channel  goroutine          channel goroutine                    goroutine        goroutine                         channel                  goroutine        1 3 1 channel  CSP                            channel     channel             linux       channel        go chan T             chan                                   chan    2                              channel                               Channel                      channel                                                               ready                                                                                                                                                                                                                                1 4 Goroutine Goroutine                     coroutine      coroutine                   greenthread go      coroutine                                                                                                      java 1 3    greenthread   JVM       java             ruby  fiber                      goroutine  golang              IO                                             1 5 Goroutine",
        "objectID": "posts/go语言的CSP模型",
        "date": "2020-12-18T10:16:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Go",
            "并发"
        ],
        "categories": [
            "Golang"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "Go语言的并发",
        "uri": "posts/goroutine",
        "content": "Go     G P M    1  GPM   G Goroutine       go                  G    M Machine                 M                 G        M     P               M       P          CPU        P     GOMAXPROCS   256                M    P               M        M    10000     P     G           G        G          G                                    P         255                P             M   go      goroutine     newProcess        P         P   M     M     M  2              G G1     P       M       G1             G    G       Goroutine1   P   G            P   M                                         G   M                       M   G     G                    G M                     M    G                                    Goroutine   go        G   G                        P    P         cpu     Go                           M   P     G         G     M     M               P             P       P                                                     P           G   P                                       P                              G          CPU      M P      G      G      G              M P     G      1 61            G                    G                     1 61                    M           CPU          M     G             Go             sysmon          M     M   P            M   P          G                M                 P        G              P      G             M P                    sysmon                       P G    schedtick schedtick       G             schedtick           P        G             10ms      G                  G                                                      G                                                  G                     GOMAXPROCS 1              G                                 G                                                   3     goroutine            goroutine    10ms                  cpu             windows 20ms linux 5ms 800ms",
        "objectID": "posts/goroutine",
        "date": "2020-12-10T08:16:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "Go",
            "并发"
        ],
        "categories": [
            "Golang"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "Nginx介绍",
        "uri": "posts/nginx",
        "content": "1 1       Nginx  Nginx       Web                 IMAP POP3       Nginx                               1 1 1                                                                                                IP                  VPN                                                                                                 1 1 2                                                                                 Nginx   weight   iphash fair urlhash                                                                          1 1 3                                                                                                 1 2      Nginx  Nginx   5                                                                          Nginx        Nginx  BSD                             1 3 Nginx              Nginx                       nginx conf   Nginx         access log      HTTP      error log",
        "objectID": "posts/nginx",
        "date": "2020-12-16T08:06:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "服务器",
            "Nginx"
        ],
        "categories": [
            "Nginx"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    },
    {
        "title": "Protobuf介绍",
        "uri": "posts/protobuf",
        "content": "Protobuf     Protobuf Google                                                         JSON XML     Protocol Buffers      JSON XML       Protobuf     Protobuf                           RPC                                                Protobuf         XML JSON                   Protobuf                           XML                         XML                                 XML                               XML                     Prtobuf             XML 3 10   20 100                      GO                                         Person         Person go     go type Person struct  Name string Sex int Age introtobuf  Google                      Google     Protobuf        C   Java Python                      Protobuf                                                             XML                                   Protobuf                     Protobuf                      Protobuf             proto      Protobuf     Protobuf       Protobuf                                          proto              Message            protobuf message Order  required string order_id   1  repeated int64 num   2  optional int32 timestamp   3               proto               string     int32 int64     enum                                           1      536870911          19000 19999      Protobuf                    proto                                               required               optional             0  1      1   repeated              Go  slice    Protobuf              proto              person proto         protobuf syntax    proto2          package example message Person  required string Name   1  required int32 Age   2  required string   3            proto     Go              protobuf protoc   go_out                  go package main import    beegodemo proto   fmt  proto2  github com golang protobuf proto   log    func main     student     proto Student  Name   lly   Age  12    data err    proto2 Marshal student  err    nil  log Fatal err    stu     proto Student   err   proto2 Unmarshal data stu  err    nil   log Fatal err    fmt Println stu          go go build  o hello exe hello exe",
        "objectID": "posts/protobuf",
        "date": "2020-12-01T08:06:30.000Z",
        "lastmod": null,
        "draft": false,
        "featuredImg": "",
        "tags": [
            "协议"
        ],
        "categories": [
            "协议"
        ],
        "author": "lnback",
        "description": "",
        "lightgallery": true
    }
]